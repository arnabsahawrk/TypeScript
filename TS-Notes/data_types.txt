*Any (super type) -when we set a declare but don't declare the type the variable will be 'any' type. And we set a variable also set the value but don't set the type ts automatic infer the type according to the value.

let id;  //any
let id = 50; //number
let id:number; //it obviously number 

 -built in types: (number, string, boolean, void, null, undefined etc.)
  `void: we use void, when we don't want to return something. e.g. return nothing from a function we can use void.

In vs code when we set a variable with its type suppose string, after that when we want to operate a operation with the variable it suggest only the string type operation. e.g. charAt, indexOf, includes, concat. Even when we set variable number type and we try to operate a string operation, ts gives an error.

console.log(id.toLowerCase())  //give an error

  -user defined types: (Arrays, Enums, Classes, Interfaces etc.)

*Union Type - more than one type for variable or function parameter. e.g.
let userInfo: string | number | boolean;

*Array Type - in typescript when we declare a array with its type, we only contain value only the declared type. e.g. two pattern of declaration

let userName: string[];
let userId: number[];
let userIsActive: boolean[];

let userName: Array<string>;
let userId: Array<number>;
let userIsActive: Array<boolean>;

we can also use multiple type in an array by leveraging union type but that's inconvenient. Don't do that.

let multipleTypes: (string | number)[];

*Tuple Type - mixed data type (key, value) e.g.
let user: [number, string];

*Enum Type - no duplicate data, helps to store constants. 3 type of enums, *numeric enum, *string enum, *heterogeneous enum.
  -numeric enum: only work for numeric value.
  -string enum: only work for string value.
  -heterogeneous enum: work with mixing two of it.

  //enum - store constants; duplicate value is not allowed here.

Summary Of Enum
-------------------
.Numeric Enums: Default, auto-incrementing values starting from 0.
.String Enums: Custom string values for each member.
.Heterogeneous Enums: Mix of numeric and string values (generally avoided).
.Reverse Mapping: Available for numeric enums, allowing value-to-name lookup.
.Const Enums: Optimized, inlined at compile time, no reverse mapping.

*Any Type - if we have no knowledge about the variable type or user input type we can use 'any' type. e.g.
let userInput: any;

*Object Type - can store value as key value pair. e.g.

let user1: object;  //object defined
let user1: { userName: string; userId: number }; //we can also set optional key-value by '?' e.g.
let user1: { userName: string; userId?: number }; //now it didn't give use a error if the key is missing. //set optional key
let users: object[]; //array of object

*Custom Type - can create own type also.
type User = { userName: string; userId: number };

type CustomRequestType = "GET" | "POST";
let getRequest: CustomRequestType;
getRequest = "GET";

type CustomNumber = 2 | 5;
let myNumber: CustomNumber;
myNumber = 5;

-here is the amazing thing I can also declare a specific custom string. now there only two type string value I can assign.

